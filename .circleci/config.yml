version: 2.1

#============================================================
# A reference to filter builds only to the master and feature
# branches.
#============================================================

filter_builds: &filter_builds
  filters:
    branches:
      only:
        - master

commands:
  install-dependencies:
    description: "Install dependencies for the given application layer (frontend/backend)"
    parameters:
      layer:
        type: string
    steps:
      - run:
          name: Install << parameters.layer >> dependencies
          command: |
            cd << parameters.layer >>
            npm i

  # requires calling job to be run in aws-cli executor with aws-cli default profile an code checked out
  roll-back:
      description: Roll back stacks
      parameters:
        workflow:
            type: string
        when:
            type: string
      steps:
          - run:
              name: Empty S3 bucket
              command: |
                aws s3 rm s3://udapeople-frontend-deployment-<< parameters.workflow >> --recursive                
              when: << parameters.when >>
          - run: 
              name: delete frontend stack
              command: |
                aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow >>
              when: << parameters.when >>
          - run: 
              name: delete backend stack
              command: |
                aws cloudformation delete-stack --stack-name backend-<< parameters.workflow >>
              when: << parameters.when >>
          - run: 
              name: roll back migrations if run
              command: |
                if grep -F "has been executed successfully." /tmp/workspace/db-migration-log.txt; then cd /home/circleci/project/backend; npm i; npm run migrations:revert; else echo "no migrations to revert"; fi
              when: << parameters.when >>
          - slack/notify-on-failure


orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.2.1

jobs:
  build-backend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Build Backend
          command: |
            cd backend
            npm run build
      - run:
          name: save back end build
          command: |
            mkdir /tmp/workspace
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend.tar.gz
            - package.json
      - slack/notify-on-failure

  build-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm run build
      - slack/notify-on-failure

  test-backend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Unit Test Backend
          command: |
            cd backend
            mkdir -p ./reports/junit/
            npm run test:report
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/
      - slack/notify-on-failure

  test-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Unit Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm run test:report
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  audit-backend-dependencies:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Audit backend Dependencies
          command: |
            cd backend
            npm audit --audit-level=critical
      - slack/notify-on-failure

  audit-frontend-dependencies:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Audit frontend dependencies
          command: |
            cd frontend
            npm audit --audit-level=critical
      - slack/notify-on-failure

  create-infra-backend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Create Infra Backend
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: save backend instance public url
          command: |
            mkdir /tmp/workspace
            aws ec2 describe-instances --filters "Name=tag-value,Values=backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query "Reservations[*].Instances[*].[PublicDnsName]" --output text > /tmp/workspace/backend_url.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend_url.txt

      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  migrate-db:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Migrate DB
          command: |
            mkdir /tmp/workspace
            cd backend
            npm run migrations | tee /tmp/workspace/db-migration-log.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - db-migration-log.txt
      - slack/notify-on-failure

  deploy-backend:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["	f1:b6:04:ba:fe:3b:33:da:2a:62:24:c1:bf:23:3f:d2"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Ansible & playbook dependencies
          command: |
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Create ansible inventory
          command: |
            echo "[backend]" > .circleci/ansible/inventory.txt
            cat /tmp/workspace/backend_url.txt >> .circleci/ansible/inventory.txt
            echo .circleci/ansible/inventory.txt
      - run:
          name: run ansible
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt playbook.yml

  create-infra-frontend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run: mkdir /tmp/workspace
      - run:
          name: save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/workspace/old_s3arn.txt
      - run:
          name: Create Infra frontend
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - old_s3arn.txt

  deploy-build-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Build Frontend
          command: |
            export API_URL=http://`cat /tmp/workspace/backend_url.txt`:3030
            cd frontend            
            npm run build
      - run:
          name: save front build
          command: |
            cd frontend/dist
            tar -zcvf /tmp/workspace/frontend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - frontend.tar.gz
      - slack/notify-on-failure

  deploy-copy-frontend:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: decompress frontend
          command: |
            echo `ls /tmp/workspace`
            mkdir ~/frontend
            cp /tmp/workspace/frontend.tar.gz ~/frontend
            cd ~/frontend
            tar -zxvf frontend.tar.gz
            echo `ls -la`
      - run:
          name: deploy to s3 bucket
          command: |
            cd ~/frontend
            aws s3 sync . s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}

  smokeTest-frontend:
      executor: aws-cli/default
      steps:
        - checkout
        - aws-cli/setup:
            profile-name: default
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: smoke test front end
            command: |
              URL="http://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"              
              if curl -s ${URL} | grep "Welcome"; then exit 0; else exit 1 ; fi
        - roll-back:
            workflow: ${CIRCLE_WORKFLOW_ID:0:7}
            when: on_fail                

  smokeTest-backend:
      executor: aws-cli/default
      steps:
        - checkout
        - aws-cli/setup:
            profile-name: default
        - attach_workspace:
            at: /tmp/workspace               
        - run: 
            name: smoke test backend
            command: |
              curl -m 20 "http://`cat /tmp/workspace/backend_url.txt`:3030/api/status"
        - roll-back:
            workflow: ${CIRCLE_WORKFLOW_ID:0:7}
            when: on_fail
          
  promote-new-build:
      executor: aws-cli/default
      steps: 
        - checkout
        - aws-cli/setup:
            profile-name: default
        - attach_workspace:
            at: /tmp/workspace
        - run: 
            name: promote new build in cloudfront
            command: |
              aws cloudformation deploy --template-file /home/circleci/project/.circleci/files/cloudfront.yml --stack-name udapeople-cloudfront --parameter-overrides WorkflowID="udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}"
        - slack/notify-on-failure
        
workflows:
  default:
    jobs:
      # - build-frontend
      - build-backend
      # - test-backend
      # - test-frontend
      # - audit-backend-dependencies
      # - audit-frontend-dependencies
      - create-infra-backend
          # requires:
          #   - build-frontend
          #   - build-backend
          #   - test-frontend
          #   - test-backend
          #   - audit-backend-dependencies
          #   - audit-frontend-dependencies
      - create-infra-frontend
      #     requires:
      #       - build-frontend
      #       - build-backend
      #       - test-frontend
      #       - test-backend
      #       - audit-backend-dependencies
      #       - audit-frontend-dependencies
      - deploy-backend:
          requires: 
            - create-infra-backend
            - build-backend
      - migrate-db:
          requires:
            - deploy-backend
      - deploy-build-frontend:
          requires:
            - create-infra-backend
      - deploy-copy-frontend:
          requires:
            - deploy-build-frontend
            - create-infra-frontend           
      - smokeTest-backend:
          requires:
            - deploy-backend
            - migrate-db
      - smokeTest-frontend:
          requires:
              - deploy-copy-frontend
              - smokeTest-backend
              - migrate-db
      - promote-new-build:
          requires:
              - smokeTest-backend
              - smokeTest-frontend