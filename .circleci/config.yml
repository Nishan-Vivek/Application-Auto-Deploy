version: 2.1

#============================================================
# A reference to filter builds only to the master and feature
# branches.
#============================================================

filter_builds: &filter_builds
  filters:
    branches:
      only:
        - master

commands:
  install-dependencies:
    description: "Install dependencies for the given application layer (frontend/backend)"
    parameters:
      layer:
        type: string
    steps:
      - run:
          name: Install << parameters.layer >> dependencies
          command: |
            cd << parameters.layer >> 
            npm i
      - slack/notify-on-failure

orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.2.1



jobs:
  build-backend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Build Backend
          command: |
            cd backend
            npm run build
      - run: 
          name: save back end build
          command: |
            mkdir /tmp/workspace
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend.tar.gz
            - package.json
      - slack/notify-on-failure

  build-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm run build
      - slack/notify-on-failure
      
  test-backend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Unit Test Backend
          command: |
            cd backend
            mkdir -p ./reports/junit/
            npm run test:report
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/
      - slack/notify-on-failure

  test-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Unit Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/              
            npm run test:report
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  audit-backend-dependencies:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Audit backend Dependencies
          command: |
            cd backend
            npm audit --audit-level=critical
      - slack/notify-on-failure

  audit-frontend-dependencies:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Audit frontend dependencies
          command: |
            cd frontend
            npm audit --audit-level=critical
      - slack/notify-on-failure

  create-infra-backend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Create Infra Backend
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: save backend instance public url
          command: |
            mkdir /tmp/workspace
            aws ec2 describe-instances --filters "Name=tag-value,Values=backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query "Reservations[*].Instances[*].[PublicDnsName]" --output text > /tmp/workspace/backend_url.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend_url.txt

      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
  
  configure-infra-backend:      
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["	f1:b6:04:ba:fe:3b:33:da:2a:62:24:c1:bf:23:3f:d2"]
      - attach_workspace:
          at: /tmp/workspace          
      - run:
          name: Install Ansible & playbook dependencies
          command: |
              apk add --update ansible
              ansible-galaxy install weareinteractive.environment
      - run: 
          name: Create ansible inventory
          command: |
              echo "[backend]" > .circleci/ansible/inventory.txt
              cat /tmp/workspace/backend_url.txt >> .circleci/ansible/inventory.txt
              echo .circleci/ansible/inventory.txt
      - run:
          name: run ansible
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt playbook.yml
  
  create-infra-frontend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run: mkdir /tmp/workspace
      - run:
          name: save old bucket arn
          command:   echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-deployment`" >> /tmp/workspace/old_s3arn.txt
      - run:
          name: Create Infra frontend
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - olds3arn.txt

  testarnsave:
      docker:
        - image: alpine:latest
      steps: 
        - attach_workspace:
            at: /tmp/workspace
        - run: echo /tmp/workspace/olds3arn.txt

workflows:
  default:    
    jobs:
      # - build-backend
      #     #  <<: *filter_builds
      
      # - build-frontend:
      #     <<: *filter_builds

      # - test-backend:
      #     <<: *filter_builds

      # - test-frontend:
      #     <<: *filter_builds
          
      # - audit-backend-dependencies:
      #     <<: *filter_builds

      # - audit-frontend-dependencies:
      #     <<: *filter_builds

      # - create-infra-backend
      #       # <<: *filter_builds      

      - create-infra-frontend
          # <<: *filter_builds
      
      # - configure-infra-backend:
      #     requires:
      #       - create-infra-backend
      #       - build-backend

      - testarnsave:
          requires:
              - create-infra-frontend
        
